//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonApplication.PersonReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/PersonService.Models")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PersonReference.IPersonService")]
    public interface IPersonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/Get", ReplyAction="http://tempuri.org/IPersonService/GetResponse")]
        PersonApplication.PersonReference.Person[] Get();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/Get", ReplyAction="http://tempuri.org/IPersonService/GetResponse")]
        System.Threading.Tasks.Task<PersonApplication.PersonReference.Person[]> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetByID", ReplyAction="http://tempuri.org/IPersonService/GetByIDResponse")]
        PersonApplication.PersonReference.Person GetByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetByID", ReplyAction="http://tempuri.org/IPersonService/GetByIDResponse")]
        System.Threading.Tasks.Task<PersonApplication.PersonReference.Person> GetByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/Insert", ReplyAction="http://tempuri.org/IPersonService/InsertResponse")]
        void Insert(PersonApplication.PersonReference.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/Insert", ReplyAction="http://tempuri.org/IPersonService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(PersonApplication.PersonReference.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/Delete", ReplyAction="http://tempuri.org/IPersonService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/Delete", ReplyAction="http://tempuri.org/IPersonService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/Edit", ReplyAction="http://tempuri.org/IPersonService/EditResponse")]
        void Edit(PersonApplication.PersonReference.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/Edit", ReplyAction="http://tempuri.org/IPersonService/EditResponse")]
        System.Threading.Tasks.Task EditAsync(PersonApplication.PersonReference.Person person);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPersonServiceChannel : PersonApplication.PersonReference.IPersonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonServiceClient : System.ServiceModel.ClientBase<PersonApplication.PersonReference.IPersonService>, PersonApplication.PersonReference.IPersonService {
        
        public PersonServiceClient() {
        }
        
        public PersonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PersonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PersonApplication.PersonReference.Person[] Get() {
            return base.Channel.Get();
        }
        
        public System.Threading.Tasks.Task<PersonApplication.PersonReference.Person[]> GetAsync() {
            return base.Channel.GetAsync();
        }
        
        public PersonApplication.PersonReference.Person GetByID(int id) {
            return base.Channel.GetByID(id);
        }
        
        public System.Threading.Tasks.Task<PersonApplication.PersonReference.Person> GetByIDAsync(int id) {
            return base.Channel.GetByIDAsync(id);
        }
        
        public void Insert(PersonApplication.PersonReference.Person person) {
            base.Channel.Insert(person);
        }
        
        public System.Threading.Tasks.Task InsertAsync(PersonApplication.PersonReference.Person person) {
            return base.Channel.InsertAsync(person);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void Edit(PersonApplication.PersonReference.Person person) {
            base.Channel.Edit(person);
        }
        
        public System.Threading.Tasks.Task EditAsync(PersonApplication.PersonReference.Person person) {
            return base.Channel.EditAsync(person);
        }
    }
}
